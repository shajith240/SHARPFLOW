{
  "name": "leadgen_joe",
  "nodes": [
    {
      "parameters": {
        "name": "leadScraping",
        "description": "=Call this tool to scrape leads once you have enough details about the search query. \n\nYour input must be in json like this: \n\n[\n  {\n    \"location\": [\n      \"LOCATION1+HERE\",\n      \"LOCATION2+HERE\",\n      ...\n    ],\n    \"business\": [\n      \"BUSINESS1+HERE\",\n      \"BUSINESS2+HERE\",\n      ...\n    ],\n    \"job_title\": [\n      \"TITLE1+HERE\",\n      \"TITLE2+HERE\",\n      ...\n    ]\n  }\n]",
        "workflowId": {
          "__rl": true,
          "value": "BoTAMrwBMzZVWElD",
          "mode": "list",
          "cachedResultName": "content creation — lead_scraping"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1160,
        300
      ],
      "id": "9700a328-0927-4537-b6b2-8ca6628e59df",
      "name": "leadScraping"
    },
    {
      "parameters": {
        "name": "leadResearch",
        "description": "Call this tool to research leads. the input should be their linkedin URL in the following format: \n\n{\n\"linkedinURL\": \"[URL-HERE]\"\n}",
        "workflowId": {
          "__rl": true,
          "value": "DTurQSyWDz4CJYRV",
          "mode": "list",
          "cachedResultName": "content creation — lead_research"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1320,
        300
      ],
      "id": "1ae25a1d-316b-4dbe-970e-3da5646c2f61",
      "name": "leadResearch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=# Overview \nYou are a lead generation agent, responsible for scraping and researching leads. \n\n# Tools \n### leadScraping: \nUse this tool to scrape leads into a Google Sheet. Only call this tool once you have enough information to complete the desired JSON search query. The tool expects EXACTLY this JSON format:\n\n[\n  {\n    \"location\": [\"location1+with+plus+signs\", \"location2+with+plus+signs\"],\n    \"business\": [\"business1+with+plus+signs\", \"business2+with+plus+signs\"],\n    \"job_title\": [\"job1+with+plus+signs\", \"job2+with+plus+signs\"]\n  }\n]\n\n### leadResearch: \nUse this tool to research a lead by their linkedIn URL. \n\n# Rules \n- Ask clarifying questions if you're unsure about something.\n- Ask questions to gather enough information to satisfy the query for each of the tools.\n- You should introduce yourself as \"Lead Generation Joe\" and ask the user what leads they want to scrape today.\n- CRITICAL: Always replace ALL spaces with '+' in your search queries. For example, \"Los Angeles United States\" becomes \"los+angeles+united+states\".\n- CRITICAL: Always use lowercase for all values in the JSON.\n- CRITICAL: The JSON must be wrapped in square brackets [] and contain exactly one object with the three required fields.\n- CRITICAL: All field values must be arrays, even if they contain only one item.\n- CRITICAL: Field names are singular: \"location\", \"business\", \"job_title\" (NOT plural).\n- You always need a linkedIn URL to research a lead.\n- You can only research one person at a time.\n- Make sure you always call the tools with correct JSON formatting, but don't wrap the query in ``````.\n\n# Input Processing Guidelines\nWhen users provide input in any format, extract and convert as follows:\n\n1. **Locations**: Extract any city, state, country mentions. Convert to \"city+state+country\" format.\n2. **Business Types**: Extract industry, business type, or company descriptions. Convert to simple business terms.\n3. **Job Titles**: Extract roles, positions, or titles. Convert to standard job titles.\n\n# Common Conversions\n- \"New York\" → \"new+york+united+states\"\n- \"hair salon owner\" → business: [\"hair+salon\"], job_title: [\"owner\"]\n- \"restaurant manager in LA\" → location: [\"los+angeles+united+states\"], business: [\"restaurant\"], job_title: [\"manager\"]\n- \"tech startup CEO\" → business: [\"technology+startup\"], job_title: [\"ceo\"]\n\n# Example Interactions\n- Input: \"Hi\" \n- Output: \"Hi, I'm Lead Generation Joe! Which leads can I help you scrape today? Just tell me the locations, business types, and job titles and let me handle the rest!\"\n\n- Input: \"I want hair salon owners in New York\"\n- Extract: location=\"New York\", business=\"hair salon\", job_title=\"owner\"\n- Call leadScraping tool with:\n[\n  {\n    \"location\": [\n      \"new+york+united+states\"\n    ],\n    \"business\": [\n      \"hair+salon\"\n    ],\n    \"job_title\": [\n      \"owner\"\n    ]\n  }\n]\n\n- Input: \"Find me restaurant managers and chefs in Los Angeles and Miami\"\n- Extract: locations=\"Los Angeles, Miami\", business=\"restaurant\", job_titles=\"manager, chef\"\n- Call leadScraping tool with:\n[\n  {\n    \"location\": [\n      \"los+angeles+united+states\",\n      \"miami+united+states\"\n    ],\n    \"business\": [\n      \"restaurant\"\n    ],\n    \"job_title\": [\n      \"manager\",\n      \"chef\"\n    ]\n  }\n]\n\n- Input: \"Tech startup founders in San Francisco and Austin\"\n- Call leadScraping tool with:\n[\n  {\n    \"location\": [\n      \"san+francisco+united+states\",\n      \"austin+united+states\"\n    ],\n    \"business\": [\n      \"technology+startup\"\n    ],\n    \"job_title\": [\n      \"founder\"\n    ]\n  }\n]\n\n# Error Prevention\n- Always double-check that your JSON has the outer square brackets []\n- Ensure all spaces are replaced with + signs\n- Verify all field names are singular and lowercase\n- Confirm all values are in arrays, even single items\n- Make sure there are no trailing commas or syntax errors\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1020,
        60
      ],
      "id": "2a7e9789-93a5-446e-93d4-6dab45a8dbd4",
      "name": "Lead Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        860,
        300
      ],
      "id": "b443f98f-fce8-4213-83b6-075d7a0a80b8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "DGciUKVcZvzxsrRY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1020,
        300
      ],
      "id": "3bce2ef7-b3ea-4774-a8ef-3c8166a63a56",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}"
      },
      "id": "5973bab4-6328-41bd-a524-55493f73e279",
      "name": "Download File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        500,
        -40
      ],
      "webhookId": "83bb7385-33f6-4105-8294-1a91c0ebbee5",
      "credentials": {
        "telegramApi": {
          "id": "Vh3gQftmq3VaxyBA",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "9062ef27-37b7-4207-b2a0-bb254e1b6625",
      "name": "Transcribe",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        720,
        -40
      ],
      "credentials": {
        "openAiApi": {
          "id": "DGciUKVcZvzxsrRY",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe7ecc99-e1e8-4a5e-bdd6-6fce9757b234",
              "name": "text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "c1243a39-01cb-4ff5-b03a-42a043ec463b",
      "name": "Text",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        160
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "a1bdbed1-cdaf-48ca-a36d-2a6121be2f37",
      "name": "Voice or Text",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        280,
        60
      ]
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "42d234b3-7fdd-4573-b73c-542e6149e648",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        60,
        60
      ],
      "webhookId": "99eab1a0-569d-4f0f-a49e-578a02abfe63",
      "credentials": {
        "telegramApi": {
          "id": "Vh3gQftmq3VaxyBA",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "4ef21ef5-f627-43c7-b955-7b028011926e",
      "name": "Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1500,
        -40
      ],
      "webhookId": "5dced4b9-5066-4036-a4d4-14fc07edd53c",
      "credentials": {
        "telegramApi": {
          "id": "Vh3gQftmq3VaxyBA",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.error }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "3d9e18aa-ed15-4598-bbd7-6440ddbd1514",
      "name": "Error Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1500,
        160
      ],
      "webhookId": "5dced4b9-5066-4036-a4d4-14fc07edd53c",
      "credentials": {
        "telegramApi": {
          "id": "Vh3gQftmq3VaxyBA",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "leadScraping": {
      "ai_tool": [
        [
          {
            "node": "Lead Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "leadResearch": {
      "ai_tool": [
        [
          {
            "node": "Lead Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Lead Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Lead Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Voice or Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe": {
      "main": [
        [
          {
            "node": "Lead Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text": {
      "main": [
        [
          {
            "node": "Lead Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lead Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1963ed89-29de-47af-8f8f-472a2cd49642",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "022896cafaa27b11a721221e2cd78e73e9f4e3c3b76d1ef131e7168ed504d13b"
  },
  "id": "dDzXtmYgd2PrmhfX",
  "tags": [
    {
      "createdAt": "2025-05-26T12:39:39.426Z",
      "updatedAt": "2025-05-26T12:39:39.426Z",
      "id": "i8zD3tLJPS4KPU0l",
      "name": "lead_gen"
    }
  ]
}