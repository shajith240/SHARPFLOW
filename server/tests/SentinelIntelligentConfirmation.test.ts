// Mock OpenAI first, before any imports
const mockOpenAIInstance = {
  chat: {
    completions: {
      create: jest.fn().mockImplementation((params) => {
        const fullMessage = params.messages?.[0]?.content || "";

        // For Prism intent recognition
        if (fullMessage.includes("UNIVERSAL INTENT TYPES")) {
          return Promise.resolve({
            choices: [
              {
                message: {
                  content: JSON.stringify({
                    intent: {
                      type: "reminder",
                      confidence: 0.9,
                      parameters: {
                        reminderText: "mom's birthday",
                        reminderDate: "2024-01-15",
                        reminderTime: null, // No time specified
                        reminderType: "birthday",
                      },
                      requiredAgent: "sentinel",
                    },
                    response: "I'll help you set up that reminder!",
                  }),
                },
              },
            ],
          });
        }

        // For Sentinel reminder analysis
        if (fullMessage.includes("Analyze this reminder request")) {
          return Promise.resolve({
            choices: [
              {
                message: {
                  content: JSON.stringify({
                    title: "Mom's Birthday Reminder",
                    description: "Reminder for mom's birthday",
                    date: "2024-01-15",
                    time: "NEEDS_CONFIRMATION",
                    type: "birthday",
                    timeWasAutoGenerated: true,
                    needsTimeConfirmation: true,
                    contextualInfo: {
                      urgency: "medium",
                      category: "personal",
                      suggestedTimeRanges: ["morning", "afternoon"],
                    },
                  }),
                },
              },
            ],
          });
        }

        // For time confirmation question generation
        if (
          fullMessage.includes(
            "Generate an intelligent, contextual follow-up question"
          )
        ) {
          // Return different messages based on context
          if (fullMessage.includes("birthday")) {
            return Promise.resolve({
              choices: [
                {
                  message: {
                    content: JSON.stringify({
                      message:
                        "Hi Shajith! What time would you like me to remind you about mom's birthday? I suggest 9:00 AM so you have the whole day to plan something special, or 8:00 AM if you want an early start.",
                      suggestedTimes: [
                        {
                          time: "09:00",
                          label: "9:00 AM",
                          reasoning:
                            "Morning reminder so you have the whole day to celebrate",
                        },
                        {
                          time: "08:00",
                          label: "8:00 AM",
                          reasoning: "Early reminder to plan something special",
                        },
                      ],
                      reasoning:
                        "Birthday reminders work best in the morning so you have time to prepare and celebrate throughout the day.",
                    }),
                  },
                },
              ],
            });
          } else if (fullMessage.includes("dentist")) {
            return Promise.resolve({
              choices: [
                {
                  message: {
                    content: JSON.stringify({
                      message:
                        "What time would you like me to remind you about your dentist appointment? I suggest 8:00 AM to give you time to prepare, or 7:30 AM if you need extra time.",
                      suggestedTimes: [
                        {
                          time: "08:00",
                          label: "8:00 AM",
                          reasoning:
                            "Early reminder to prepare for the appointment",
                        },
                        {
                          time: "07:30",
                          label: "7:30 AM",
                          reasoning: "Extra early for preparation time",
                        },
                      ],
                      reasoning:
                        "Medical appointments benefit from early reminders to allow preparation time.",
                    }),
                  },
                },
              ],
            });
          }

          // Default fallback
          return Promise.resolve({
            choices: [
              {
                message: {
                  content: JSON.stringify({
                    message:
                      "What time would you like me to remind you? I suggest 9:00 AM as a good default time.",
                    suggestedTimes: [
                      {
                        time: "09:00",
                        label: "9:00 AM",
                        reasoning: "Good default morning time",
                      },
                    ],
                    reasoning: "Morning reminders are generally effective.",
                  }),
                },
              },
            ],
          });
        }

        // For time extraction from user response
        if (fullMessage.includes("Extract the confirmed time")) {
          if (fullMessage.includes("9:00 AM")) {
            return Promise.resolve({
              choices: [
                {
                  message: {
                    content: JSON.stringify({
                      time: "09:00",
                      timeLabel: "9:00 AM",
                      confidence: 0.95,
                      reasoning: "User specified 9:00 AM clearly",
                    }),
                  },
                },
              ],
            });
          }
        }

        // For personalized response generation
        if (
          fullMessage.includes("Generate a personalized, friendly confirmation")
        ) {
          return Promise.resolve({
            choices: [
              {
                message: {
                  content:
                    "Perfect! I've set a reminder for mom's birthday on January 15th at 9:00 AM. I'll make sure to notify you so you don't forget this special day! ðŸŽ‰",
                },
              },
            ],
          });
        }

        // Default fallback
        return Promise.resolve({
          choices: [
            {
              message: {
                content: JSON.stringify({
                  message: "I'll help you with that reminder!",
                }),
              },
            },
          ],
        });
      }),
    },
  },
};

jest.mock("openai", () => {
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(() => mockOpenAIInstance),
  };
});

// Mock the services and dependencies
jest.mock("../services/GmailService");
jest.mock("../services/GoogleCalendarService", () => ({
  GoogleCalendarService: jest.fn().mockImplementation(() => ({
    createEvent: jest.fn().mockResolvedValue({
      id: "test-event-id",
      htmlLink: "https://calendar.google.com/event/test-event-id",
    }),
  })),
}));

// Mock Supabase
jest.mock("../db", () => ({
  supabase: {
    from: jest.fn(() => ({
      insert: jest.fn(() => ({
        select: jest.fn(() => Promise.resolve({ data: [], error: null })),
      })),
      select: jest.fn(() => Promise.resolve({ data: [], error: null })),
    })),
  },
}));

import { SentinelAgent } from "../ai-agents/agents/SentinelAgent";
import { Prism } from "../ai-agents/core/Prism";
import type { AgentJob } from "../ai-agents/types/index";

describe("Sentinel Agent Intelligent Confirmation Workflow", () => {
  let sentinelAgent: SentinelAgent;
  let prism: Prism;

  beforeEach(() => {
    // Reset all mocks
    jest.clearAllMocks();

    // Create instances
    prism = new Prism();
    sentinelAgent = new SentinelAgent();
  });

  describe("Time Confirmation Detection", () => {
    test("should detect when time confirmation is needed", async () => {
      // First, test Prism intent recognition
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      expect(prismResult.intent.type).toBe("reminder");
      expect(prismResult.intent.parameters.reminderTime).toBeNull();

      // Then test Sentinel Agent processing
      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const sentinelResult = await sentinelAgent.process(job);

      expect(sentinelResult.success).toBe(true);
      expect(sentinelResult.data.needsConfirmation).toBe(true);
      expect(sentinelResult.data.confirmationType).toBe("time_confirmation");
      expect(sentinelResult.data.message).toContain("What time would you like");
      expect(sentinelResult.data.suggestedTimes).toBeDefined();
      expect(sentinelResult.data.suggestedTimes.length).toBeGreaterThan(0);
    });

    test("should not require confirmation when time is specified", async () => {
      // Update the mock for this specific test
      const mockCreate = mockOpenAIInstance.chat.completions
        .create as jest.Mock;
      mockCreate.mockImplementation((params) => {
        const fullMessage = params.messages?.[0]?.content || "";

        if (fullMessage.includes("UNIVERSAL INTENT TYPES")) {
          return Promise.resolve({
            choices: [
              {
                message: {
                  content: JSON.stringify({
                    intent: {
                      type: "reminder",
                      confidence: 0.9,
                      parameters: {
                        reminderText: "meeting",
                        reminderDate: "2024-01-15",
                        reminderTime: "14:00", // Time specified
                        reminderType: "appointment",
                      },
                      requiredAgent: "sentinel",
                    },
                    response: "I'll set up that reminder!",
                  }),
                },
              },
            ],
          });
        }

        if (fullMessage.includes("Analyze this reminder request")) {
          return Promise.resolve({
            choices: [
              {
                message: {
                  content: JSON.stringify({
                    title: "Meeting Reminder",
                    description: "Reminder for meeting",
                    date: "2024-01-15",
                    time: "14:00",
                    type: "appointment",
                    timeWasAutoGenerated: false,
                    needsTimeConfirmation: false,
                  }),
                },
              },
            ],
          });
        }

        return Promise.resolve({
          choices: [
            {
              message: {
                content: "Meeting reminder set for 2:00 PM!",
              },
            },
          ],
        });
      });

      const prismResult = await prism.processMessage(
        "remind me about the meeting at 2pm today",
        "test-user-id",
        "test-session-id"
      );

      expect(prismResult.intent.type).toBe("reminder");
      expect(prismResult.intent.parameters.reminderTime).toBe("14:00");

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const sentinelResult = await sentinelAgent.process(job);

      expect(sentinelResult.success).toBe(true);
      expect(sentinelResult.data.needsConfirmation).toBeFalsy();
      expect(sentinelResult.data.reminderDetails.time).toBe("14:00");
    });
  });

  describe("OpenAI-Powered Question Generation", () => {
    test("should generate contextual follow-up questions for birthday reminders", async () => {
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const sentinelResult = await sentinelAgent.process(job);

      expect(sentinelResult.success).toBe(true);
      expect(sentinelResult.data.message).toContain("mom's birthday");
      expect(sentinelResult.data.message).toContain("What time");
      expect(sentinelResult.data.suggestedTimes).toHaveLength(2);
      expect(sentinelResult.data.suggestedTimes[0].reasoning).toContain(
        "whole day"
      );
      expect(sentinelResult.data.reasoning).toContain("Birthday reminders");
    });

    test("should provide reasoning for suggested times", async () => {
      const prismResult = await prism.processMessage(
        "set a reminder for my dentist appointment tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const sentinelResult = await sentinelAgent.process(job);

      expect(sentinelResult.success).toBe(true);
      expect(sentinelResult.data.suggestedTimes).toBeDefined();
      expect(sentinelResult.data.suggestedTimes[0].reasoning).toBeDefined();
      expect(sentinelResult.data.reasoning).toBeDefined();
    });
  });

  describe("Multi-turn Conversation Flow", () => {
    test("should process user confirmation response", async () => {
      // First, get the confirmation question
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const initialJob = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const initialResult = await sentinelAgent.process(initialJob);

      expect(initialResult.data.needsConfirmation).toBe(true);

      // Then, process the user's confirmation
      const confirmationJob: AgentJob = {
        id: "test-job-2",
        userId: "test-user-id",
        agentName: "sentinel",
        jobType: "reminder",
        inputData: {
          isFollowUp: true,
          confirmationResponse: "9:00 AM sounds perfect",
          originalReminderDetails: initialResult.data.reminderDetails,
        },
        status: "pending",
        progress: 0,
        createdAt: new Date(),
      };

      const finalResult = await sentinelAgent.process(confirmationJob);

      expect(finalResult.success).toBe(true);
      expect(finalResult.data.message).toContain("9:00 AM");
      expect(finalResult.data.reminderDetails.time).toBe("09:00");
      expect(finalResult.metadata?.reminderCreated).toBe(true);
    });

    test("should handle unclear time responses gracefully", async () => {
      const confirmationJob: AgentJob = {
        id: "test-job-3",
        userId: "test-user-id",
        agentName: "sentinel",
        jobType: "reminder",
        inputData: {
          isFollowUp: true,
          confirmationResponse: "sometime later maybe",
          originalReminderDetails: {
            reminderText: "mom's birthday",
            type: "birthday",
          },
        },
        status: "pending",
        progress: 0,
        createdAt: new Date(),
      };

      const result = await sentinelAgent.process(confirmationJob);

      // Should either ask for clarification or use a default with low confidence
      expect(result.success).toBeDefined();
      if (!result.success) {
        expect(result.data.message).toContain("trouble understanding");
      }
    });
  });

  describe("No Hardcoded Responses", () => {
    test("should generate dynamic confirmation messages", async () => {
      const prismResult1 = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job1 = await prism.createAgentJob(
        prismResult1.intent,
        "test-user-id",
        "test-session-id"
      );

      const result1 = await sentinelAgent.process(job1);

      const prismResult2 = await prism.processMessage(
        "set a reminder for my dentist appointment",
        "test-user-id",
        "test-session-id"
      );

      const job2 = await prism.createAgentJob(
        prismResult2.intent,
        "test-user-id",
        "test-session-id"
      );

      const result2 = await sentinelAgent.process(job2);

      // Messages should be different and contextual
      expect(result1.data.message).not.toBe(result2.data.message);
      expect(result1.data.message).toContain("birthday");
      expect(result2.data.message).toContain("dentist");
    });

    test("should provide dynamic reasoning for suggested times", async () => {
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const result = await sentinelAgent.process(job);

      expect(result.data.reasoning).toBeDefined();
      expect(result.data.reasoning).not.toBe("Default reasoning");
      expect(result.data.suggestedTimes[0].reasoning).toBeDefined();
      expect(result.data.suggestedTimes[0].reasoning).not.toBe(
        "Default reason"
      );
    });
  });

  describe("Smart Defaults with Confirmation", () => {
    test("should always ask for confirmation even with smart defaults", async () => {
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const result = await sentinelAgent.process(job);

      expect(result.data.needsConfirmation).toBe(true);
      expect(result.data.message).toContain("What time");
      expect(result.data.suggestedTimes).toBeDefined();
      expect(result.metadata?.awaitingConfirmation).toBe(true);
      expect(result.metadata?.reminderCreated).toBe(false);
    });

    test("should explain reasoning behind suggested times", async () => {
      const prismResult = await prism.processMessage(
        "remind me about mom's birthday tomorrow",
        "test-user-id",
        "test-session-id"
      );

      const job = await prism.createAgentJob(
        prismResult.intent,
        "test-user-id",
        "test-session-id"
      );

      const result = await sentinelAgent.process(job);

      expect(result.data.suggestedTimes[0].reasoning).toContain("whole day");
      expect(result.data.reasoning).toContain("Birthday reminders");
    });
  });
});
