# ============================================================================
# SharpFlow Release Pipeline - Automated Release Management
# Semantic versioning, changelog generation, and release automation
# ============================================================================

name: üè∑Ô∏è Release Management

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create prerelease'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # Determine Release Version
  # ============================================================================
  version:
    name: üìã Determine Release Version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìã Determine version
        id: version
        run: |
          # Get current version from package.json
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"
          
          # Determine release type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            release_type="${{ github.event.inputs.release_type }}"
            prerelease="${{ github.event.inputs.prerelease }}"
          else
            # Auto-determine based on commit messages
            if git log --format=%B -n 20 | grep -q "BREAKING CHANGE\|feat!"; then
              release_type="major"
            elif git log --format=%B -n 20 | grep -q "^feat"; then
              release_type="minor"
            else
              release_type="patch"
            fi
            prerelease="false"
          fi
          
          echo "Release type: $release_type"
          echo "Prerelease: $prerelease"
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          
          case $release_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="$major.$minor.$patch"
          
          if [[ "$prerelease" == "true" ]]; then
            new_version="$new_version-rc.$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT
          
          # Generate changelog
          changelog=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # ============================================================================
  # Create Release
  # ============================================================================
  release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [version]
    permissions:
      contents: write
      packages: write

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üè∑Ô∏è Update version in package.json
        run: |
          npm version ${{ needs.version.outputs.version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ needs.version.outputs.version }}"

      - name: üèóÔ∏è Build release artifacts
        run: |
          npm run build
          
          # Create release archive
          tar -czf sharpflow-${{ needs.version.outputs.version }}.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            README.md \
            LICENSE \
            Dockerfile \
            docker-compose.prod.yml

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and push release Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          labels: |
            org.opencontainers.image.title=SharpFlow
            org.opencontainers.image.description=SharpFlow Lead Generation Platform
            org.opencontainers.image.version=${{ needs.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üè∑Ô∏è Create Git tag
        run: |
          git tag ${{ needs.version.outputs.tag }}
          git push origin ${{ needs.version.outputs.tag }}

      - name: üìù Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # SharpFlow ${{ needs.version.outputs.version }}
          
          ## üöÄ What's New
          
          ${{ needs.version.outputs.changelog }}
          
          ## üì¶ Installation
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
          \`\`\`
          
          ### Docker Compose
          \`\`\`bash
          # Download the release archive
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/sharpflow-${{ needs.version.outputs.version }}.tar.gz
          
          # Extract and run
          tar -xzf sharpflow-${{ needs.version.outputs.version }}.tar.gz
          docker-compose -f docker-compose.prod.yml up -d
          \`\`\`
          
          ## üîß Configuration
          
          Make sure to configure your environment variables according to the [documentation](README.md).
          
          ## üêõ Bug Reports
          
          If you encounter any issues, please report them on our [GitHub Issues](https://github.com/${{ github.repository }}/issues) page.
          EOF

      - name: üöÄ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          release_name: SharpFlow ${{ needs.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.version.outputs.version, 'rc') }}

      - name: üì¶ Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sharpflow-${{ needs.version.outputs.version }}.tar.gz
          asset_name: sharpflow-${{ needs.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # ============================================================================
  # Post-Release Actions
  # ============================================================================
  post-release:
    name: üì¢ Post-Release Actions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [version, release]

    steps:
      - name: üì¢ Announce release
        run: |
          echo "üéâ SharpFlow ${{ needs.version.outputs.version }} has been released!"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }}"
          echo "üê≥ Docker Image: ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}"

      - name: üîÑ Trigger deployment
        if: ${{ !contains(needs.version.outputs.version, 'rc') }}
        run: |
          echo "üöÄ Triggering production deployment for stable release..."
          # This would trigger the CD pipeline for production deployment
