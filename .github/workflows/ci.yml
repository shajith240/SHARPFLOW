# ============================================================================
# SharpFlow CI Pipeline - Continuous Integration
# Automated testing, linting, type checking, and build verification
# ============================================================================

name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ============================================================================
  # Code Quality & Linting
  # ============================================================================
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:check

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 📝 TypeScript type checking
        run: npm run check

  # ============================================================================
  # Unit Tests & Coverage
  # ============================================================================
  test:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        test-suite: ['unit', 'integration', 'multi-tenant']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        if: matrix.test-suite == 'unit'
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: 🔗 Run integration tests
        if: matrix.test-suite == 'integration'
        run: npm run test:pipeline
        env:
          NODE_ENV: test

      - name: 🏢 Run multi-tenant tests
        if: matrix.test-suite == 'multi-tenant'
        run: npm run test:multi-tenant
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # Build Verification
  # ============================================================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📦 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist/
            client/dist/
          key: build-${{ env.CACHE_VERSION }}-${{ github.sha }}
          restore-keys: |
            build-${{ env.CACHE_VERSION }}-

  # ============================================================================
  # Docker Build & Security Scan
  # ============================================================================
  docker:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          tags: sharpflow:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sharpflow:ci-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Database Migration Test
  # ============================================================================
  database:
    name: 🗄️ Database Migration Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sharpflow_test
          POSTGRES_USER: sharpflow
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗄️ Test database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://sharpflow:test_password@localhost:5432/sharpflow_test

  # ============================================================================
  # CI Summary
  # ============================================================================
  ci-summary:
    name: ✅ CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker, database]
    if: always()

    steps:
      - name: 📊 Check CI status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.docker.result }}" == "success" && 
                "${{ needs.database.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Build: ${{ needs.build.result }}"
            echo "  Docker: ${{ needs.docker.result }}"
            echo "  Database: ${{ needs.database.result }}"
            exit 1
          fi
