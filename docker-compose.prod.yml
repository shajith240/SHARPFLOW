# ============================================================================
# SharpFlow Lead Generation Platform - Production Docker Compose
# Multi-tenant SaaS with AI agents - Production Environment
# ============================================================================

version: '3.8'

services:
  # SharpFlow Application (Production)
  sharpflow-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Use production stage
    container_name: sharpflow-prod
    ports:
      - "3000:3000"
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=3000
      
      # Database Configuration (Supabase)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - DATABASE_URL=${DATABASE_URL}
      
      # Authentication
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      
      # External Services
      - APIFY_TOKEN=${APIFY_TOKEN}
      
      # Email Configuration
      - GMAIL_CLIENT_ID=${GMAIL_CLIENT_ID}
      - GMAIL_CLIENT_SECRET=${GMAIL_CLIENT_SECRET}
      - GMAIL_REFRESH_TOKEN=${GMAIL_REFRESH_TOKEN}
      
      # PayPal Configuration
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - PAYPAL_ENVIRONMENT=${PAYPAL_ENVIRONMENT:-live}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - USE_REDIS=true
      
    depends_on:
      - redis
    networks:
      - sharpflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Email Monitoring Queues (Production)
  redis:
    image: redis:7-alpine
    container_name: sharpflow-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sharpflow-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production load balancing)
  # nginx:
  #   image: nginx:alpine
  #   container_name: sharpflow-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - sharpflow-app
  #   networks:
  #     - sharpflow-network
  #   restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  sharpflow-network:
    driver: bridge
